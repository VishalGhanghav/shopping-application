spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=Vishal@5600
spring.jpa.hibernate.ddl-auto=update

server.port=8081
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service

##RESILIENCE 4J

#Enable Actuator
management.health.circuitbreakers.enabled=true
#using this actuator will expose all endpoints including  default ie health
management.endpoints.web.exposure.include=*
#Be default set to never.Using this it will always show health of our services
management.endpoint.health.show-details=always

#Resilience 4J properties
#To show all states like open,closed,half open
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
#Buffer Size
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#If specific amount of requests are failing then only call circuit breaker logic
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#If 5 requests are failing then only call circuit breaker logic
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
#If 50% requests fail
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#How much time to wait in open state before changing to half open state
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#How many calls to allow in half open state so resilience 4j can check 
#whether communication between order and inventory service is working properly or not 
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
#Allow auto transition from open to half open
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4J Timeout Properties
#We will wait 5s before sending timeout
resilience4j.timelimiter.instances.inventory.timeout-duration=5s


#Resilience4J Retry Properties
#Try retry only 3 times.Wait 5s before retry
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

## DISTRIBUTED TRACING
#zipkin is exposed to 9411
spring.zipkin.base-url=http://localhost:9411
#Send 100% of the request to zipkin which we are recieving in the system 
spring.sleuth.sampler.probablity=1.0


##Kafka Properties
#list of server where we find kafka.Here locally we have 9092
spring.kafka.bootstrap-servers=localhost:9092
#Send notificationTopic as default topic
spring.kafka.template.default-topic=notificationTopic
#We have to send this key value pair in serialized format
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#To convert this java object into json we use serializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#What type of class are we sending as producer 
#toker:fully qualified class name of what we are sending in body.
#Using this spring boot understands what is the json type mapping of order placed event
spring.kafka.producer.properties.spring.json.type.mapping=event:com.VishalGhanghav.orderservice.event.OrderPlacedEvent